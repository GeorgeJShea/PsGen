import random

#________________________________________________________________________________________
# Name: Name goes here     ÃŸeta
# Date Created: 7/12/21
# Date Modified 7/12/21
# Generates a Passsword useing a the given alogrythm
# uses 3 key sequences randomly genereted to create more ease of memorization
# Version 1.0
#________________________________________________________________________________________

# 10x4 so 9x3
keyBoard = \
    [
        ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"],
        ["q", "w", "e", "r", "t", "y", "u", "i", "o", "p"],
        ["a", "s", "d", "f", "g", "h", "j", "k", "l", ";"],
        ["z", "x", "c", "v", "b", "n", "m", ",", ".", "/"]
    ]

def Segment(LeadingDigit = None):
    # Starting Paths
    # Path LEading Number
    # many passwords require at least 1 digit this acomplishes this
    if(LeadingDigit == True):
        # Generets a New Starting Postion
        oneX, oneY = NewPosit()
        # Forces new spot to be on numb rows
        x, y = oneX, 0
        char1 = ValidSpot(x, y)

    # Path Letters
    else:
        # choses a postion at random from keyboard array
        oneX, oneY = NewPosit()
        char1 = ValidSpot(oneY, oneX)

    dir = PickADir()                                    # choses a new direction to go to
    twoX, twoY = int(dir[0]) + oneX, int(dir[1]) + oneY # moves pointer to this direction
    char2 = ValidSpot(twoY, twoX)                       # validates postion and if valid assigns pointer and char to this spot


    dir = PickADir()                                        # choses a new direction to go to
    threeX, threeY = int(dir[0]) + twoX, int(dir[1]) + twoY # moves pointer to this direction
    char3 = ValidSpot(threeY, threeX)                       # validates postion and if valid assigns pointer and char to this spot


    return char1, char2, char3

def ValidSpot(y, x):
    # Attemps to move to new location
    try:
        char = keyBoard[y][x]
    # if spot invalid it will chose a new spot at random
    except:
        x, y = NewPosit()
        newChar = keyBoard[y][x]
        char = newChar
    return char


def Total():
    # will run three times making the password string 9 chars long
    one, two, three = Segment()
    four, five, six = Segment()
    seven, eight, nine = Segment(LeadingDigit=True)         # assures that atleast 1 numb will be in password

    complete = [one, two, three, four, five, six, seven, eight, nine]

    # at random will captilize items with in the string at given precentage
    count = 0
    for char in complete:
        roll = random.randrange(0, 10)
        if(roll > 6):
            complete[count] = char.upper()
        count = count + 1

    roll = random.randrange(0, len(complete))   #
    complete[roll] = complete[roll].upper()     # just in case no cap was applied

    complete = str(complete).replace("['", "").replace("']", "").replace(", ", "").replace("'", "")

    specialChar = ["{", "[", "]", "}", ":", ";", "<", ">", "?", "/", "-", "_", "+", "="]    #special char list will be tacked on to the begging
    roll = random.randrange(0, len((specialChar))- 1)
    # this will generate in total a 10 char long password
    print("Password Generated: \n", specialChar[roll] + complete)
    print()
def PickADir():
    #Picks dirtion to travel in the array
    # 0 1 2
    # 3 4 5
    # 6 7 8

    # -1,-1  0,-1  1,-1
    # -1, 0  0, 0  1, 0
    # -1, 1, 0, 1, 1, 1

    argument = random.randrange(0, 8)
    switcher = {
        0: [-1, -1],
        1: [0, -1],
        2: [1, -1],
        3: [-1, 0],
        4: [0, 0],
        5: [1, 0],
        6: [-1, 1],
        7: [0, 1],
        8: [1, 1],
    }
    return switcher.get(argument, "nothing")

def NewPosit():
    # Determins Starting Position Of Sequance
    # Also used as a fall back if the algrothym attempts to break outside the array.
    x = random.randrange(0,9)
    y = random.randrange(0,3)
    return x, y


while True:
    Total()
